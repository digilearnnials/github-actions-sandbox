name: Build & Deploy Client

on:
  workflow_call: {}

env:
  BUILD_FULL_NAME: "${{ vars.CLIENT_BUILD_NAME }} ${{ github.ref_name }}"
  BUILD_TARGET: WebGL

jobs:
    buildAndDeployClient:
      name: Build & deploy
      runs-on: ubuntu-latest
      steps:
        
        # Checkouts the current repository
        - name: Checkout
          uses: actions/checkout@v3
          with:
            fetch-depth: 0
        
        # Caches the Library folder for faster builds
        - name: Cache
          uses: actions/cache@v3
          with:
            path: Library
            key: Library-${{ env.BUILD_TARGET }}

        # Detects in which environemnt the build should be deployed
        - name: Detect environment
          id: detectEnvironment
          run: bash ${GITHUB_WORKSPACE}/.github/scripts/common/detect-environment.sh
          env:
            GITHUB_REF_NAME: ${{ github.ref_name }}
        
        # Builds the WebGL client using a given license
        - name: Build
          uses: game-ci/unity-builder@v2
          env:
            UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
            UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
            UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          with:
            buildName: "${{ env.BUILD_FULL_NAME }}"
            targetPlatform: ${{ env.BUILD_TARGET }}
            versioning: Tag
            buildMethod: Digi.EditorTools.BuildScript.Build
            customParameters: -productType Client -environmentType ${{ steps.detectEnvironment.outputs.targetEnvironment }} -serverType Hosted

        # Configures git with specific commit author and email
        - name: Configure git
          run: bash ${GITHUB_WORKSPACE}/.github/scripts/deployment-repository/configure-git.sh
          env:
            DEPLOYMENT_REPO_COMMIT_AUTHOR: ${{ vars.DEPLOYMENT_REPO_COMMIT_AUTHOR }}
            DEPLOYMENT_REPO_COMMIT_EMAIL: ${{ vars.DEPLOYMENT_REPO_COMMIT_EMAIL }}

        # Clones the external deployment repository
        - name: Clone repository
          run: bash ${GITHUB_WORKSPACE}/.github/scripts/deployment-repository/clone-deployment-repository.sh
          env:
            DEPLOYMENT_REPO_URL: ${{ vars.DEPLOYMENT_REPO_URL }}
            DEPLOYMENT_REPO_USERNAME: ${{ vars.DEPLOYMENT_REPO_USERNAME }}
            DEPLOYMENT_REPO_APP_PASSWORD: ${{ secrets.DEPLOYMENT_REPO_APP_PASSWORD }}

        # Uses hard reset to return to first commit before pushing new build (if needed) due to size limit
        - name: Hard reset deployment branch
          run: bash ${GITHUB_WORKSPACE}/.github/scripts/deployment-repository/hard-reset-deployment-branch.sh
          env:
            DEPLOYMENT_REPO_DEVELOPMENT_BRANCH: ${{ vars.DEPLOYMENT_REPO_DEVELOPMENT_BRANCH }}
            DEPLOYMENT_REPO_STAGING_BRANCH: ${{ vars.DEPLOYMENT_REPO_STAGING_BRANCH }}
            DEPLOYMENT_REPO_PRODUCTION_BRANCH: ${{ vars.DEPLOYMENT_REPO_PRODUCTION_BRANCH }}
            DEPLOYMENT_REPO_HARD_RESET_COMMIT_ID: ${{ vars.DEPLOYMENT_REPO_HARD_RESET_COMMIT_ID }}
            TARGET_ENVIRONMENT: ${{ steps.detectEnvironment.outputs.targetEnvironment }}
        
        # Copies the build, commits & pushes the changes to the deployment repository
        - name: Deploy to repository
          run: bash ${GITHUB_WORKSPACE}/.github/scripts/deployment-repository/deploy-to-repository.sh
          env:
            BUILD_TARGET: ${{ env.BUILD_TARGET }}
            BUILD_FULL_NAME: ${{ env.BUILD_FULL_NAME }}
            VERSION_NUMBER: ${{ github.ref_name }}
        
        # Sends a Discord message to the appropriate builds channel
        - name: Discord notification
          env:
            DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
            DISCORD_USERNAME: GitHub CI Bot
          uses: Ilshidur/action-discord@master
          with:
            args: "The version ${{ github.ref_name }} is ready for testing!"