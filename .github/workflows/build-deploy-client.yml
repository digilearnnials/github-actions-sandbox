name: Build & Deploy Client

on:
  workflow_call:
    inputs:
      targetEnvironment:
        required: true
        type: string
    secrets:
      UNITY_LICENSE:
        required: true
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true
      REPOSITORY_URL:
        required: true

env:
  BUILD_FULL_NAME: "${{ vars.CLIENT_BUILD_NAME }} ${{ github.ref_name }}"
  BUILD_TARGET: WebGL

jobs:
    buildAndDeployClient:
      name: Build & deploy
      runs-on: ubuntu-latest
      steps:  
        
        # Checkouts the current repository
        - name: Checkout
          uses: actions/checkout@v2
          with:
            fetch-depth: 0
        
        # Caches the Library folder for faster builds
        - name: Cache
          uses: actions/cache@v2
          with:
            path: Library
            key: Library-${{ env.BUILD_TARGET }}
        
        # Builds the WebGL client using a given license
        - name: Build
          uses: game-ci/unity-builder@v2
          env:
            UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
            UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
            UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          with:
            buildName: "${{ env.BUILD_FULL_NAME }}"
            targetPlatform: ${{ env.BUILD_TARGET }}
            versioning: Tag
            buildMethod: Digi.EditorTools.BuildScript.Build
            customParameters: -productType Client -environmentType ${{ inputs.targetEnvironment }} -serverType Hosted

        # Configures git with specific commit author and email
        - name: Configure git
          run: |
              git config --global user.name "${{ vars.CI_COMMIT_AUTHOR }}"
              git config --global user.email "${{ vars.CI_COMMIT_EMAIL }}"

        # Clones the external deployment repository
        - name: Clone repository
          run: |
              git clone "${{ secrets.REPOSITORY_URL }}" deployment

        # Uses hard reset to return to first commit before pushing new build (if needed) due to size limit
        - name: Reset branch
          run: |
              cd deployment
              checkoutBranch="none"
              case ${{ inputs.targetEnvironment }} in
                development)
                checkoutBranch=${{ vars.DEPLOY_DEVELOPMENT_BRANCH }}
                ;;
                staging)
                checkoutBranch="${{ vars.DEPLOY_STAGING_BRANCH }}"
                ;;
                production)
                checkoutBranch="${{ vars.DEPLOY_PRODUCTION_BRANCH }}"
                ;;
              esac
              git checkout $checkoutBranch
              latestCommitId=$(git rev-parse HEAD)
              if [ "$latestCommitId" != "${{ vars.HARD_RESET_COMMIT_ID }}" ]
              then
                git reset --hard ${{ vars.HARD_RESET_COMMIT_ID }}
                git push --force
              fi
        
        # Copies the generated build to the repository folder
        - name: Copy build
          run: |
              cp -R "build/${{ env.BUILD_TARGET }}/${{ env.BUILD_FULL_NAME }}/"* deployment
        
        # Commits & pushes the changes to the deployment repository
        - name: Deploy to repository
          run: |
              cd deployment
              git add .
              git commit -m "Version ${{ github.ref_name }}"
              git push

        # Generates a zip with the build
        - name: Zip build for release
          id: zip_build_for_release
          run: |
              oldStr=" "
              newStr="_"
              zipName=$(echo ${{ env.BUILD_FULL_NAME }} | sed "s/$oldStr/$newStr/g")
              zip -r "$zipName.zip" deployment
              echo "ZIP_NAME=$zipName" >> $GITHUB_OUTPUT 
        
        # Uploads the zip file generated at the previous step as a GitHub release
        - name: Upload release
          uses: xresloader/upload-to-github-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            file: "${{ steps.zip_build_for_release.outputs.ZIP_NAME }}.zip"
            tags: true
            draft: false